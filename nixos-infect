#! /usr/bin/env bash

# More info at: https://github.com/elitak/nixos-infect


# === nixos-infect-flake: bootstrap NixOS on running Linux instance ===
#
# Required (when using flakes):
#   USE_FLAKE=1                Enable flake-based install mode
#   FLAKE_URI=github:user/repo Flake URI (local path, git, or github)
#   FLAKE_HOSTNAME=myhost      Hostname key in `nixosConfigurations`
#
# Optional:
#   NO_REBOOT=1                Prevent reboot after switch
#   NO_SWAP=1                  Skip swap creation/removal
#   NIXOS_CONFIG=http://...    Legacy URL for configuration.nix (non-flake mode only)
#
# Example usage:
#   # Flake install:
#   USE_FLAKE=1 FLAKE_URI="github:myuser/nixos-config" FLAKE_HOSTNAME="web1" ./nixos-infect
#
#   # Legacy (non-flake) install:
#   NIXOS_CONFIG="https://example.com/configuration.nix" ./nixos-infect


set -e -o pipefail

# included for detailed tracing
set -x


makeConf() {

  # toggle env variable for using flakes instead of 'classic' config
  if [[ "$USE_FLAKE" == "1" ]]; then
    echo "Skipping legacy configuration.nix setup in favor of flake.nix"
    return 0
  fi

  # Skip everything if main config already present
  [[ -e /etc/nixos/configuration.nix ]] && return 0

 

  # NB <<"EOF" quotes / $ ` in heredocs, <<EOF does not
  mkdir -p /etc/nixos
  # Prevent grep for sending error code 1 (and halting execution) when no lines are selected : https://www.unix.com/man-page/posix/1P/grep
  local IFS=$'\n'
  for trypath in /root/.ssh/authorized_keys /home/$SUDO_USER/.ssh/authorized_keys $HOME/.ssh/authorized_keys; do
      [[ -r "$trypath" ]] \
      && keys=$(sed -E 's/^[^#].*[[:space:]]((sk-ssh|sk-ecdsa|ssh|ecdsa)-[^[:space:]]+)[[:space:]]+([^[:space:]]+)([[:space:]]*.*)$/\1 \3\4/' "$trypath") \
      && [[ ! -z "$keys" ]] \
      && break
  done
  local network_import=""

  [[ -n "$doNetConf" ]] && network_import="./networking.nix # generated at runtime by nixos-infect"
  cat > /etc/nixos/configuration.nix << EOF
{ ... }: {
  imports = [
    ./hardware-configuration.nix
    $network_import
    $NIXOS_IMPORT
  ];

  boot.tmp.cleanOnBoot = true;
  zramSwap.enable = ${zramswap};
  networking.hostName = "$(hostname -s)";
  networking.domain = "$(hostname -d)";
  services.openssh.enable = true;
  users.users.root.openssh.authorizedKeys.keys = [$(while read -r line; do
    line=$(echo -n "$line" | sed 's/\r//g')
    trimmed_line=$(echo -n "$line" | xargs)
    echo -n "''$trimmed_line'' "
  done <<< "$keys")];
  system.stateVersion = "23.11";
}
EOF

  if isEFI; then
    bootcfg=$(cat << EOF
  boot.loader.grub = {
    efiSupport = true;
    efiInstallAsRemovable = true;
    device = "nodev";
  };
  fileSystems."/boot" = { device = "$esp"; fsType = "vfat"; };
EOF
)
  else
    bootcfg=$(cat << EOF
  boot.loader.grub.device = "$grubdev";
EOF
)
  fi

  availableKernelModules=('"ata_piix"' '"uhci_hcd"' '"xen_blkfront"')
  if isX86_64; then
    availableKernelModules+=('"vmw_pvscsi"')
  fi

  # If you rerun this later, be sure to prune the filesSystems attr
  cat > /etc/nixos/hardware-configuration.nix << EOF
{ modulesPath, ... }:
{
  imports = [ (modulesPath + "/profiles/qemu-guest.nix") ];
$bootcfg
  boot.initrd.availableKernelModules = [ ${availableKernelModules[@]} ];
  boot.initrd.kernelModules = [ "nvme" ];
  fileSystems."/" = { device = "$rootfsdev"; fsType = "$rootfstype"; };
  $swapcfg
}
EOF

  [[ -n "$doNetConf" ]] && makeNetworkingConf || true
}


makeNetworkingConf() {
  local IFS=$'\n'
  eth0_name=$(ip address show | grep '^2:' | awk -F': ' '{print $2}')
  eth0_ip4s=$(ip address show dev "$eth0_name" | grep 'inet ' | sed -r 's|.*inet ([0-9.]+)/([0-9]+).*|{ address="\1"; prefixLength=\2; }|')
  eth0_ip6s=$(ip address show dev "$eth0_name" | grep 'inet6 ' | sed -r 's|.*inet6 ([0-9a-f:]+)/([0-9]+).*|{ address="\1"; prefixLength=\2; }|' || '')
  gateway=$(ip route show dev "$eth0_name" | grep default | sed -r 's|default via ([0-9.]+).*|\1|')
  gateway6=$(ip -6 route show dev "$eth0_name" | grep default | sed -r 's|default via ([0-9a-f:]+).*|\1|' || true)
  ether0=$(ip address show dev "$eth0_name" | grep link/ether | sed -r 's|.*link/ether ([0-9a-f:]+) .*|\1|')

  eth1_name=$(ip address show | grep '^3:' | awk -F': ' '{print $2}') || true
  if [ -n "$eth1_name" ]; then
    eth1_ip4s=$(ip address show dev "$eth1_name" | grep 'inet ' | sed -r 's|.*inet ([0-9.]+)/([0-9]+).*|{ address="\1"; prefixLength=\2; }|')
    eth1_ip6s=$(ip address show dev "$eth1_name" | grep 'inet6 ' | sed -r 's|.*inet6 ([0-9a-f:]+)/([0-9]+).*|{ address="\1"; prefixLength=\2; }|' || '')
    ether1=$(ip address show dev "$eth1_name" | grep link/ether | sed -r 's|.*link/ether ([0-9a-f:]+) .*|\1|')
    interfaces1=$(cat << EOF
      $eth1_name = {
        ipv4.addresses = [$(for a in "${eth1_ip4s[@]}"; do echo -n "
          $a"; done)
        ];
        ipv6.addresses = [$(for a in "${eth1_ip6s[@]}"; do echo -n "
          $a"; done)
        ];
      };
EOF
    )
    extraRules1="ATTR{address}==\"${ether1}\", NAME=\"${eth1_name}\""
  else
    interfaces1=""
    extraRules1=""
  fi

  readarray nameservers < <(grep ^nameserver /etc/resolv.conf | sed -r \
    -e 's/^nameserver[[:space:]]+([0-9.a-fA-F:]+).*/"\1"/' \
    -e 's/127[0-9.]+/8.8.8.8/' \
    -e 's/::1/8.8.8.8/' )

  if [[ "$eth0_name" = eth* ]]; then
    predictable_inames="usePredictableInterfaceNames = lib.mkForce false;"
  else
    predictable_inames="usePredictableInterfaceNames = lib.mkForce true;"
  fi

  cat > /etc/nixos/networking.nix << EOF
{ lib, ... }: {
  networking = {
    nameservers = [ ${nameservers[@]} ];
    defaultGateway = "${gateway}";
    defaultGateway6 = {
      address = "${gateway6}";
      interface = "${eth0_name}";
    };
    dhcpcd.enable = false;
    $predictable_inames
    interfaces = {
      $eth0_name = {
        ipv4.addresses = [$(for a in "${eth0_ip4s[@]}"; do echo -n "
          $a"; done)
        ];
        ipv6.addresses = [$(for a in "${eth0_ip6s[@]}"; do echo -n "
          $a"; done)
        ];
        ipv4.routes = [ { address = "${gateway}"; prefixLength = 32; } ];
        ipv6.routes = [ { address = "${gateway6}"; prefixLength = 128; } ];
      };
      $interfaces1
    };
  };
  services.udev.extraRules = ''
    ATTR{address}=="${ether0}", NAME="${eth0_name}"
    $extraRules1
  '';
}
EOF
}


checkExistingSwap() {
  SWAPSHOW=$(swapon --show --noheadings --raw)
  zramswap=true
  swapcfg=""
  if [[ -n "$SWAPSHOW" ]]; then
    SWAP_DEVICE="${SWAPSHOW%% *}"
    if [[ "$SWAP_DEVICE" == "/dev/"* ]]; then
      zramswap=false
      swapcfg="swapDevices = [ { device = \"${SWAP_DEVICE}\"; } ];"
      NO_SWAP=true
    fi
  fi
}

makeSwap() {
  # create temporary folder in /var due to /temp memory confinement.
  mkdir -p /var/tmp-nixos-infect
  swapFile=$(mktemp /var/tmp-nixos-infect/nixos-infect.XXXXX.swp)
  dd if=/dev/zero "of=$swapFile" bs=1M count=$((1*1024))
  chmod 0600 "$swapFile"
  mkswap "$swapFile"
  swapon -v "$swapFile"
}

removeSwap() {
  swapoff -a
  rm -vf /var/tmp-nixos-infect/nixos-infect.*.swp

}

isX86_64() {
  [[ "$(uname -m)" == "x86_64" ]]
}

isEFI() {
  [ -d /sys/firmware/efi ]
}

findESP() {
  esp=""
  for d in /boot/EFI /boot/efi /boot; do
    [[ ! -d "$d" ]] && continue
    [[ "$d" == "$(df "$d" --output=target | sed 1d)" ]] \
      && esp="$(df "$d" --output=source | sed 1d)" \
      && break
  done
  [[ -z "$esp" ]] && { echo "ERROR: No ESP mount point found"; return 1; }
  for uuid in /dev/disk/by-uuid/*; do
    [[ $(readlink -f "$uuid") == "$esp" ]] && echo $uuid && return 0
  done
}

prepareEnv() {
  # $esp and $grubdev are used in makeConf()
  if isEFI; then
    esp="$(findESP)"
  else
    for grubdev in /dev/vda /dev/sda /dev/xvda /dev/nvme0n1 ; do [[ -e $grubdev ]] && break; done
  fi

  # Retrieve root fs block device
  #                   (get root mount)  (get partition or logical volume)
  rootfsdev=$(mount | grep "on / type" | awk '{print $1;}')
  rootfstype=$(df $rootfsdev --output=fstype | sed 1d)

  # DigitalOcean doesn't seem to set USER while running user data
  export USER="root"
  export HOME="/root"

  # Nix installer tries to use sudo regardless of whether we're already uid 0
  #which sudo || { sudo() { eval "$@"; }; export -f sudo; }
  # shellcheck disable=SC2174
  mkdir -p -m 0755 /nix
}

fakeCurlUsingWget() {
  # Use adapted wget if curl is missing
  which wget && { \
    curl() {
      eval "wget $(
        (local isStdout=1
        for arg in "$@"; do
          case "$arg" in
            "-o")
              echo "-O";
              isStdout=0
              ;;
            "-O")
              isStdout=0
              ;;
            "-L")
              ;;
            *)
              echo "$arg"
              ;;
          esac
        done;
        [[ $isStdout -eq 1 ]] && echo "-O-"
        )| tr '\n' ' '
      )"
    }; export -f curl; }
}

req() {
  type "$1" > /dev/null 2>&1 || which "$1" > /dev/null 2>&1
}




checkEnv() {
  [[ "$(whoami)" == "root" ]] || { echo "ERROR: Must run as root"; return 1; }

  # Perform some easy fixups before checking
  # TODO prevent multiple calls to apt-get update
  (which dnf && dnf install -y perl-Digest-SHA) || true # Fedora 24
  which bzcat || (which yum && yum install -y bzip2) \
              || (which apt-get && apt-get update && apt-get install -y bzip2) \
              || true
  which xzcat || (which yum && yum install -y xz-utils) \
              || (which apt-get && apt-get update && apt-get install -y xz-utils) \
              || true
  which curl  || fakeCurlUsingWget \
              || (which apt-get && apt-get update && apt-get install -y curl) \
              || true

  req curl || req wget || { echo "ERROR: Missing both curl and wget";  return 1; }
  req bzcat            || { echo "ERROR: Missing bzcat";               return 1; }
  req xzcat            || { echo "ERROR: Missing xzcat";               return 1; }
  req groupadd         || { echo "ERROR: Missing groupadd";            return 1; }
  req useradd          || { echo "ERROR: Missing useradd";             return 1; }
  req ip               || { echo "ERROR: Missing ip";                  return 1; }
  req awk              || { echo "ERROR: Missing awk";                 return 1; }
  req cut || req df    || { echo "ERROR: Missing coreutils (cut, df)"; return 1; }

  # On some versions of Oracle Linux these have the wrong permissions,
  # which stops sshd from starting when NixOS boots
  chmod 600 /etc/ssh/ssh_host_*_key
}

checkEnvVars() {
  if [[ "$USE_FLAKE" == "1" ]]; then
    [[ -z "$FLAKE_URI" ]] && { echo "ERROR: FLAKE_URI not set but USE_FLAKE=1"; exit 1; }
    [[ -z "$FLAKE_HOSTNAME" ]] && { echo "ERROR: FLAKE_HOSTNAME not set but USE_FLAKE=1"; exit 1; }
  fi

  return 0;
}


infect() {
  echo "[+] Beginning flake-based NixOS installation..."

  # add nix build users
  groupadd nixbld -g 30000 || true
  for i in {1..10}; do
    useradd -c "Nix build user $i" -d /var/empty -g nixbld -G nixbld -M -N -r -s "$(which nologin)" "nixbld$i" || true
  done
  
  # Install Nix
  NIX_INSTALL_URL="${NIX_INSTALL_URL:-https://nixos.org/nix/install}"
  curl -L "${NIX_INSTALL_URL}" | sh -s -- --no-channel-add
  source ~/.nix-profile/etc/profile.d/nix.sh


  # Check for flake use or legacy installation without flakes
  if [[ "$USE_FLAKE" == "1" ]]; then
    echo "[+] Flake mode enabled"

    mkdir -p /etc/nix
    echo "experimental-features = nix-command flakes" >> /etc/nix/nix.conf

    echo "[+] Cloning flake from $FLAKE_URI to /etc/nixos/flake"
    rm -rf /etc/nixos/flake
    mkdir -p /etc/nixos
    if [[ "$FLAKE_URI" == /* || "$FLAKE_URI" == "."* || "$FLAKE_URI" == "~"* ]]; then
      echo "[INFO] Detected local flake path: $FLAKE_URI"
      mkdir -p /etc/nixos/flake
      cp -r "$FLAKE_URI"/. /etc/nixos/flake/
    else
      echo "[INFO] Cloning flake from remote URI: $FLAKE_URI"
      nix --extra-experimental-features nix-command --extra-experimental-features flakes \
          run nixpkgs#git -- clone "$FLAKE_URI" /etc/nixos/flake
    fi


    # Basically, this checks if nixos is already installed, as this is needed for nixos-rebuild --> otherwise it is inviked via the remote repo nixpkgs
    if ! command -v nixos-rebuild >/dev/null 2>&1; then
      echo "[ERROR] nixos-rebuild not found. Attempting to run via nix shell..."
      nix --extra-experimental-features nix-command --extra-experimental-features flakes \
        run nixpkgs#nixos-rebuild -- switch --flake /etc/nixos/flake#ec2-small
    else
      nixos-rebuild switch --flake /etc/nixos/flake#ec2-small
    fi


  else
    echo "[+] Legacy mode enabled"




    [[ -z "$NIX_CHANNEL" ]] && NIX_CHANNEL="nixos-23.11"
    nix-channel --remove nixpkgs
    nix-channel --add "https://nixos.org/channels/$NIX_CHANNEL" nixos
    nix-channel --update

    if [[ "$NIXOS_CONFIG" == http* ]]; then
      echo "[+] Downloading configuration.nix from $NIXOS_CONFIG"
      curl -L "$NIXOS_CONFIG" -o /etc/nixos/configuration.nix
    fi

    export NIXOS_CONFIG="${NIXOS_CONFIG:-/etc/nixos/configuration.nix}"

    nix-env --set \
      -I nixpkgs=$(realpath $HOME/.nix-defexpr/channels/nixos) \
      -f '<nixpkgs/nixos>' \
      -p /nix/var/nix/profiles/system \
      -A system
  fi

  [[ -L /etc/resolv.conf ]] && mv -v /etc/resolv.conf /etc/resolv.conf.lnk && cat /etc/resolv.conf.lnk > /etc/resolv.conf

  if [ -n "$newrootfslabel" ]; then
    echo "Setting label of $rootfsdev to $newrootfslabel"
    e2label "$rootfsdev" "$newrootfslabel"
  fi

  touch /etc/NIXOS
  echo etc/nixos                  >> /etc/NIXOS_LUSTRATE
  echo etc/resolv.conf            >> /etc/NIXOS_LUSTRATE
  echo root/.nix-defexpr/channels >> /etc/NIXOS_LUSTRATE
  (cd / && ls etc/ssh/ssh_host_*_key* || true) >> /etc/NIXOS_LUSTRATE

  echo "[✓] NixOS installation complete."
}



checkEnv
checkEnvVars
prepareEnv
checkExistingSwap
if [[ -z "$NO_SWAP" ]]; then
    makeSwap # smallest (512MB) droplet needs extra memory!
fi
makeConf
infect
if [[ -z "$NO_SWAP" ]]; then
    removeSwap
fi

if [[ -z "$NO_REBOOT" ]]; then
  reboot
fi
